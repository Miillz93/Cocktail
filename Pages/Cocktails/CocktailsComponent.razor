@inject HttpClient Http


<MudGrid Class="mx-3 mt-16">
    @if(drinks == null){
        <MudItem xs="12" sm="6" lg="3"
            Typo="Typo.h3">
            <MudText>
                No Available Data
            </MudText>
        </MudItem>
    }else{
    
        <MudItem xs="12" sm="12">
            <MudText Typo="Typo.h4" Color="Color.Success">
                Total des Cocktails: @drinks.Count
            </MudText>
        </MudItem>
        @foreach (var drink in drinks)
        {
            string imagePath = drink.strDrinkThumb.Replace("\\","").Trim();
            string currentDrink = "/cocktail/"+@drink.idDrink;

            <MudItem xs="12" sm="3">
                <MudCard>
                    <MudCardMedia Image="@imagePath" Height="250" />
                    <MudCardContent>
                        <MudText 
                            Typo="Typo.h5" 
                            Color="Color.Success">@drink.strDrink</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton
                            Variant="Variant.Text"
                            Color="Color.Success">
                               <MudLink Href="@currentDrink"
                               Underline="Underline.None">Learn More </MudLink>
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            @* <div class="col-md-6 col-lg-3">
                <div class="card my-3">
                    <div class="card-thumbnail">
                        <img src="@imagePath" class="img-fluid" alt="thumbnail">
                    </div>
                    <div class="card-body">
                        <h3 class="card-title"><a href="/cocktail/@drink.idDrink" class="text-secondary">@drink.strDrink</a></h3
                    </div>
                </div>
            </div>  *@
            
        }
    
    }
</MudGrid>

@code {
    private List<Drink>? drinks {get;set;} 

     string searchDrinkApi="", checkSearchApi = "";
     string inputDrinkItem=""; 
       protected override async Task OnInitializedAsync()
    {
        await getCocktails(inputDrinkItem);
    }

    public async Task<List<Drink>> getCocktails(string inputDrinkItem){
        
        if(String.IsNullOrWhiteSpace(inputDrinkItem)){
            checkSearchApi = "search.php?f=a";
        }else{
            checkSearchApi = (inputDrinkItem.Length == 1 ) ? searchDrinkApi = $"search.php?f={inputDrinkItem}": searchDrinkApi= $"search.php?s={inputDrinkItem}" ;
        }
        Stream stream = await Http.GetStreamAsync(DrinkRoot._urlBase+checkSearchApi);
        StreamReader reader = new StreamReader(stream);
        string jsonString = reader.ReadToEnd();
        var cocktailsValues = System.Text.Json.JsonSerializer.Deserialize<DrinkRoot>(jsonString);
        drinks = cocktailsValues.drinks;

        return drinks;
    }


}