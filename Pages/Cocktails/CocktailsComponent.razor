@inject ICocktailService CocktailService
@inject HttpClient _http

<MudGrid class="mb-16">
    <MudPaper class="mud-theme-success py-10" Width="100%">
        <MudContainer>
            <MudPaper Elevation="0" Class="d-flex align-center flex-grow-1 gap-8 mud-theme-success">
                <MudPaper Elevation="0" Class="py-10 flex-1 mx-xs-auto" style="background: none !important;">
                    <MudText Class="text-white small-text mx-5" Typo="Typo.h1">Designed to make the best Cocktails</MudText>
                </MudPaper>
                <MudPaper Elevation="0" Class="py-16 flex-1 d-none d-sm-flex" style="background: none !important;">
                    <MudImage Src="images/cocktail_removed.png" Width="400" Alt="cocktail home page"/>
                </MudPaper>
            </MudPaper>
            
        </MudContainer>
    </MudPaper>
</MudGrid>
<MudGrid Class="mx-3 mt-16">
    <MudItem xs="12" sm="12" Class="d-flex justify-space-between flex-grow-1 gap-4">
            <MudPaper Elevation="0">
                <MudText Typo="Typo.h5" Color="Color.Success">
            </MudText>
            </MudPaper >
            <MudPaper Elevation="0" Height="64px">
                <MudTextField 
                @bind-Value="InputDrinkItem"
                Placeholder="Search"
                DisableUnderLine
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Adornment ="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search"
                AdornmentColor="Color.Inherit" />
            </MudPaper>
        @* <MudPaper Class="mud-theme-primary" Width="64px" Height="64px"/>
<MudPaper Class="mud-theme-primary" Width="64px" Height="64px"/>
        <MudText Typo="Typo.h4" Color="Color.Success">
            Total des Cocktails: @drinks.Count 
            @* | Input: @InputDrinkItem 
        </MudText>*@
@*            
        <MudTextField 
            @bind-Value="InputDrinkItem" Style="width : 200px;"
            Placeholder="Search..."
            DisableUnderLine
            Variant="Variant.Filled"/> *@
            @* <MudTextField 
            Placeholder="Search"
            DisableUnderLine
            Variant="Variant.Filled"
            Margin="Margin.Dense"
            Adornment ="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search"
            AdornmentColor="Color.Inherit">
    </MudTextField> *@

    </MudItem>

    @if(drinks == null){
        <MudItem xs="12" sm="6" lg="3"
            Typo="Typo.h3">
            <MudText>
                No Available Data
            </MudText>
        </MudItem>
    }else{
        
        @foreach (var drink in drinks)
        {
            string imagePath = drink.strDrinkThumb.Replace("\\","").Trim();
            string currentDrink = "/cocktail/"+@drink.idDrink;

            <MudItem xs="12" sm="3">
                <MudCard>
                    <MudCardMedia Image="@imagePath" Height="250" />
                    <MudCardContent>
                        <MudText 
                            Typo="Typo.h5" 
                            Color="Color.Success">@drink.strDrink</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton
                            Variant="Variant.Text"
                            Color="Color.Success">
                               <MudLink Href="@currentDrink"
                               Underline="Underline.None">Learn More </MudLink>
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            @* <div class="col-md-6 col-lg-3">
                <div class="card my-3">
                    <div class="card-thumbnail">
                        <img src="@imagePath" class="img-fluid" alt="thumbnail">
                    </div>
                    <div class="card-body">
                        <h3 class="card-title"><a href="/cocktail/@drink.idDrink" class="text-secondary">@drink.strDrink</a></h3
                    </div>
                </div>
            </div>  *@
            
        }
    
    }
</MudGrid>

@code {

    [CascadingParameter]
    public string ? InputDrinkItem {get; set;}
    private List<Drink>? drinks {get;set;} = new List<Drink>(); 

       protected override async Task OnInitializedAsync()
    {
         
        //drinks = await CocktailService.GetCocktails("");
        GetCocktails("");
    }

        protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender){
           @* drinks = await CocktailService.GetCocktails(InputDrinkItem); *@
            GetCocktails(InputDrinkItem);
            StateHasChanged();

            @* await InvokeAsync(StateHasChanged);     *@
        }
       
    }

    public async void GetCocktails(string input){
        string CheckSearchApi="", SearchDrinkApi="";

        //var http = _httpClientFactory.CreateClient("cocktail");

        if(String.IsNullOrWhiteSpace(input)) CheckSearchApi = "search.php?f=m";

        CheckSearchApi = (input.Length == 1 ) ? SearchDrinkApi = $"search.php?f={input}": SearchDrinkApi= $"search.php?s={input}";

        @* _http.GetFromJsonAsync(CheckSearchApi) *@
        var result = await _http.GetStringAsync(CheckSearchApi).ConfigureAwait(false);
        var DrinkElements= System.Text.Json.JsonSerializer.Deserialize<DrinkRoot>(result);
        drinks = DrinkElements?.drinks;

    }

}